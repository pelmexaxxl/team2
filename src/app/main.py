from aiogram import Bot, Dispatcher
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import logging

from app.handlers import analyze
from app.configs import settings
from app.handlers.user import router as user_router
from app.handlers.admin import router as admin_router
from app.handlers.message_collector import router as collector_router
# üÜï –Ω–æ–≤—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
from app.handlers.welcome import router as welcome_router
from app.handlers.cabinet import router as cabinet_router
from app.handlers.plots import router as plots_router

# üÜï —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
from app.services.reminders import check_and_send
from app.services.summary    import send_daily_summary

# —Ñ–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π
from app.db.db import async_session_maker

from app.middlewares.db import DatabaseMiddleware
from app.services.analytics import run_daily_analysis
from aiogram.fsm.storage.memory import MemoryStorage


logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(settings.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# Middleware
db_mw = DatabaseMiddleware()
dp.message.middleware(db_mw)
dp.callback_query.middleware(db_mw)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
# –ö–æ–º–∞–Ω–¥—ã –∏–º–µ—é—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
user_router.message.filter(lambda msg: msg.text and msg.text.startswith("/"))
admin_router.message.filter(lambda msg: msg.text and msg.text.startswith("/"))
# –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–∞–Ω–¥–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –Ω—É–∂–Ω—ã –∏ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è FSM

# –í–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤!
# 1. –°–Ω–∞—á–∞–ª–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥
dp.include_router(user_router)
dp.include_router(admin_router)
dp.include_router(analyze.router)
dp.include_router(welcome_router)
dp.include_router(cabinet_router)
dp.include_router(plots_router)

# 2. –°–∞–º—ã–º –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π,
#    —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª –∫–æ–º–∞–Ω–¥—ã –∏–∑ –¥—Ä—É–≥–∏—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
dp.include_router(collector_router)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        logger.info("Bot configuration:")
        logger.info(f"- BOT_TOKEN: {'configured' if settings.BOT_TOKEN else 'missing'}")
        logger.info(f"- DATABASE_URL: {settings.database_url}")
        logger.info(f"- ADMIN_USER_ID: {settings.ADMIN_USER_ID}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—è–¥–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        logger.info("Registered handlers in order of priority:")
        for i, router in enumerate([user_router, admin_router, analyze.router, collector_router]):
            logger.info(f"{i+1}. {router.name if hasattr(router, 'name') else 'unnamed router'}")
        
        # Start the daily analysis task
        daily_task = asyncio.create_task(run_daily_analysis())
        logger.info("Daily analysis task scheduled")
        # ----------------  APScheduler  ----------------
        scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
        # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤
        scheduler.add_job(check_and_send,
                          "interval", hours=6,
                          args=[bot, async_session_maker])
        # –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è HR-—Å–≤–æ–¥–∫–∞ –≤ 18:00
        scheduler.add_job(send_daily_summary,
                          "cron", hour=18, minute=0,
                          args=[bot, async_session_maker])
        # –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –ø–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ run_daily_analysis –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:
        scheduler.add_job(run_daily_analysis, "cron", hour=2)

        scheduler.start()
        logger.info("Scheduler started with 3 jobs")
        
        # ----------------  –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞  ----------------
        logger.info("Bot started, listening for messages...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        raise


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler("/app/logs/bot_log.log", mode='a', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped")
    except Exception as e:
        logger.critical(f"Unhandled exception: {e}", exc_info=True)
