from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from app.services.admin import create_poll, add_question_to_poll
from app.models.user import Question, Poll, User, UserAnswer
from sqlalchemy import func

router = Router()

class CreatePollFSM(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_question_text = State()
    waiting_for_question_type = State()
    waiting_for_options = State()
    waiting_for_add_another = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    confirming = State()
    end_questions = State()


@router.message(F.text == "/create_poll")
async def cmd_create_poll(msg: Message, state: FSMContext):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–ø—Ä–æ—Å–∞:")
    await state.set_state(CreatePollFSM.waiting_for_title)


@router.message(CreatePollFSM.waiting_for_title)
async def process_description(msg: Message, state: FSMContext):
    await state.update_data(title=msg.text)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:")
    await state.set_state(CreatePollFSM.waiting_for_question_text)


@router.message(CreatePollFSM.waiting_for_question_text)
async def process_question_text(msg: Message, state: FSMContext):
    await state.update_data(question_text=msg.text)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—ã–π –æ—Ç–≤–µ—Ç", callback_data="open")],
        [InlineKeyboardButton(text="–° –≤–∞—Ä–∏–∞–Ω–∞–º–∏",  callback_data="closed")]
    ])
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=kb)
    await state.set_state(CreatePollFSM.waiting_for_question_type)


@router.callback_query(CreatePollFSM.waiting_for_question_type)
async def choose_type(cb: CallbackQuery, state: FSMContext):
    qtext = (await state.get_data())["question_text"]
    if cb.data == "open":
        # —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –±–µ–∑ options
        questions = (await state.get_data()).get("questions", [])
        questions.append({"text": qtext, "options": []})
        await state.update_data(questions=questions)
        await ask_add_more(cb, state)                 # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ–ª–ø–µ—Ä –Ω–∏–∂–µ
    else:
        await state.update_data(current_question_text=qtext)
        await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(CreatePollFSM.waiting_for_options)
    await cb.answer()
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helper "add one more question?" ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def ask_add_more(event: CallbackQuery | Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ¬´–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å / –ì–æ—Ç–æ–≤–æ¬ª –∏
    –ø–µ—Ä–µ–≤–æ–¥–∏—Ç FSM –≤ waiting_for_add_another.
    """
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="add_another_yes"),
         InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ",          callback_data="add_another_no")]
    ])

    # event –º–æ–∂–µ—Ç –±—ã—Ç—å CallbackQuery –∏–ª–∏ Message
    send = event.message.answer if isinstance(event, CallbackQuery) else event.answer
    await send("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å?", reply_markup=kb)

    await state.set_state(CreatePollFSM.waiting_for_add_another)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


# @router.message(CreatePollFSM.waiting_for_question_text)
# async def process_question_type(msg: Message, state: FSMContext):
#     # if cb.data == "closed":
#     await state.update_data(current_question_text=msg.text)
#     await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
#     await state.set_state(CreatePollFSM.waiting_for_options)
    # else:
    #     await state.set_state(CreatePollFSM.confirming)
    #     await confirm_poll(cb.message, state)


@router.message(CreatePollFSM.waiting_for_options)
async def process_options(msg: Message, state: FSMContext):
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    new_question = {
        "text": data["current_question_text"],
        "options": [opt.strip() for opt in msg.text.split(",")]
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Å–ø–∏—Å–æ–∫
    questions = data.get("questions", [])
    questions.append(new_question)
    await state.update_data(questions=questions, current_question_text=None)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="add_another_yes"),
         InlineKeyboardButton(text="–ù–µ—Ç", callback_data="add_another_no")]
    ])
    await msg.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å?", reply_markup=keyboard)
    await state.set_state(CreatePollFSM.waiting_for_add_another)


@router.callback_query(CreatePollFSM.waiting_for_add_another, F.data.startswith("add_another_"))
async def handle_add_another(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[-1]
    print(action, flush=True)
    
    if action == "yes":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:")
        await state.set_state(CreatePollFSM.waiting_for_question_text)
    else:
        result = []
        data = await state.get_data()
        questions = data.get("questions", [])
        for i, q in enumerate(questions, start=1):
            q_text = f"*–í–æ–ø—Ä–æ—Å {i}:* {q['text']}"
            if q["options"]:
                opts = "\n".join(f"    {j+1}) {opt}" for j, opt in enumerate(q["options"]))
                q_text += f"\n{opts}"
            else:
                q_text += "\n    (–û—Ç–∫—Ä—ã—Ç—ã–π –æ—Ç–≤–µ—Ç)"
            result.append(q_text)
        await callback.message.answer(
        "\n\n".join(result) + "\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å—ë –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n–û—Ç–≤–µ—Ç—å—Ç–µ *–¥–∞* —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ *–Ω–µ—Ç* —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã.",
        parse_mode="Markdown"
    )
        await state.set_state(CreatePollFSM.end_questions)    
    await callback.answer()
    await callback.message.delete() 
    


@router.message(CreatePollFSM.end_questions)
async def create_poll(msg: Message, state: FSMContext, session: AsyncSession):
    await msg.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –æ–ø—Ä–æ—Å–∞")
    await state.set_state(CreatePollFSM.confirming)
    await confirm_poll(msg, state, session)


async def confirm_poll(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–æ—Å
    new_poll = Poll(
        title=data["title"],
        questions=[]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    for question in data["questions"]:
        new_question = Question(
            text=question["text"],
            options=question["options"],
            poll_id=new_poll,
        )
        print(new_question)
        new_poll.questions.append(new_question)
    
    
    session.add(new_poll)
    await session.commit()
    
    await message.answer(f"–û–ø—Ä–æ—Å '{new_poll.title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ")
    await state.clear()


@router.message(F.text == "/analis")
async def analis(msg: Message, session: AsyncSession):
    query = (
        select(
            User.username,
            func.sum(UserAnswer.answer_index).label('total_answer_index')
        )
        .join(UserAnswer, User.tg_id == UserAnswer.user_id)
        .group_by(User.tg_id)
    )

    result = await session.execute(query)
    bad_employees, middle_employees, good_employees = [], [], []
    for username, total_index in result.all():
        if total_index <= 7:
            bad_employees.append(username)
        elif total_index <= 12:
            middle_employees.append(username)
        else:
            good_employees.append(username)
    response_message = (
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n"
            "üî¥ –ü–ª–æ—Ö–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n" + "\n".join(bad_employees) + "\n\n"
            "üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n" + "\n".join(middle_employees) + "\n\n"
            "üü¢ –•–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n" + "\n".join(good_employees)
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Telegram
    await msg.answer(response_message)

@router.message(F.text == "/save_template")
async def save_template(msg: Message, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    if not data.get("questions"):
        await msg.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ /create_poll.")
        return
    tpl = PollTemplate(
        title=data["title"],
        json_body=json.dumps(data["questions"]),
        author_id=msg.from_user.id,
        description="–°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç"
    )
    session.add(tpl)
    await session.commit()
    await msg.answer("‚úÖ –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

@router.message(F.text.startswith("/use_template"))
async def use_template(msg: Message, session: AsyncSession, state: FSMContext):
    try:
        tpl_id = int(msg.text.split()[1])
    except Exception:
        await msg.answer("–§–æ—Ä–º–∞—Ç: /use_template <id>")
        return
    tpl = await session.get(PollTemplate, tpl_id)
    if not tpl:
        await msg.answer("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await state.update_data(title=tpl.title,
                            questions=json.loads(tpl.json_body))
    await msg.answer("–®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *–¥–∞* —á—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–ª–∏ *–Ω–µ—Ç* –¥–ª—è –ø—Ä–∞–≤–æ–∫.", parse_mode="Markdown")
    await state.set_state(CreatePollFSM.confirming)
