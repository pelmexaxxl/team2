from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func 
from app.models.user import User, Role, UserAnswer, Question
from aiogram.types import CallbackQuery

router = Router(name="cabinet_router")

@router.message(lambda m: m.text == "/cabinet")
async def cabinet(msg: Message, session: AsyncSession):
    user: User | None = await session.scalar(select(User).where(User.tg_id == msg.from_user.id))
    if not user:
        await msg.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start.")
        return

    kb = []
    if user.role in (Role.HR, Role.ADMIN):
        kb.append([InlineKeyboardButton(text="üìä –ò—Ç–æ–≥–∏ –æ–ø—Ä–æ—Å–æ–≤", callback_data="cab_results")])
        kb.append([InlineKeyboardButton(text="üí¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", callback_data="cab_welcome")])
    if user.role == Role.ADMIN:
        kb.append([InlineKeyboardButton(text="‚öôÔ∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="cab_global")])

    kb.append([InlineKeyboardButton(text="üó≥Ô∏è –ú–æ–∏ –æ—Ç–≤–µ—Ç—ã", callback_data="cab_my")])
    await msg.answer(f"–í–∞—à —Ä–∞–Ω–≥: <b>{user.role.value}</b>", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb), parse_mode="HTML")


from aiogram.types import CallbackQuery

# --- 1. –ú–æ–∏ –æ—Ç–≤–µ—Ç—ã -------------------------------------------------
@router.callback_query(lambda c: c.data == "cab_my")
async def cab_my(cb: CallbackQuery, session: AsyncSession):
    await cb.answer()                        # –∑–∞–∫—Ä—ã—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª
    # –ø—Ä–∏–º–µ—Ä: –≤—ã–≤–µ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    q = select(UserAnswer).where(UserAnswer.user_id == cb.from_user.id).order_by(UserAnswer.id.desc()).limit(5)
    answers = (await session.scalars(q)).all()
    text = "\n".join(f"‚Ä¢ {a.answer_index} ‚Äî –≤–æ–ø—Ä–æ—Å {a.question_id}" for a in answers) or "–û—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    await cb.message.edit_text(f"<b>–í–∞—à–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã</b>\n{text}", parse_mode="HTML")

# --- 2. –ò—Ç–æ–≥–∏ –æ–ø—Ä–æ—Å–æ–≤ ----------------------------------------------
@router.callback_query(lambda c: c.data == "cab_results")
async def cab_results(cb: CallbackQuery, session: AsyncSession):
    await cb.answer()
    # –±—ã—Å—Ç—Ä–∞—è —Å–≤–æ–¥–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–ø—Ä–æ—Å–µ
    q_poll = select(Question.poll_id).distinct().order_by(Question.poll_id.desc()).limit(1)
    poll_id = await session.scalar(q_poll)
    if not poll_id:
        await cb.message.edit_text("–û–ø—Ä–æ—Å–æ–≤ –µ—â—ë –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—å.")
        return
    total = await session.scalar(
        select(func.count()).select_from(UserAnswer).where(
            UserAnswer.question_id.in_(select(Question.id).where(Question.poll_id == poll_id))
        )
    )
    await cb.message.edit_text(f"–í –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–ø—Ä–æ—Å–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: <b>{total}</b>", parse_mode="HTML")

# --- 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è --------------------------------------
@router.callback_query(lambda c: c.data == "cab_welcome")
async def cab_welcome(cb: CallbackQuery):
    await cb.answer()
    await cb.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ\n```\n/set_welcome –ü—Ä–∏–≤–µ—Ç, {user}!\n```\n–≤ –≥—Ä—É–ø–ø–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )

# --- 4. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø—Ä–∏–º–µ—Ä) ------------------------------
@router.callback_query(lambda c: c.data == "cab_global")
async def cab_global(cb: CallbackQuery):
    await cb.answer()
    await cb.message.edit_text(
        "–ü–∞–Ω–µ–ª—å –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É üòâ"
    )
