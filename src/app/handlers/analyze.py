from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
import asyncpg
from app.services.analytics import analyze_chat_messages, ask_chat_messages_gpt
from app.configs import settings
import logging
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.fsm.state import State, StatesGroup
from app.models.user import User, Role


router = Router(name="analyze_router")
logger = logging.getLogger(__name__)


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AskGPTForm(StatesGroup):
    waiting_for_question = State()


@router.message(Command("analyze_chat"))
async def handle_analyze(message: Message):
    """Analyze messages in the current chat."""
    logger.info(f"Received analyze_chat command in chat {message.chat.id}")
    await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–∞—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏...")
    try:
        result = await analyze_chat_messages(message.chat.id)
        await message.answer(result)
        logger.info(f"Completed analysis for chat {message.chat.id}")
    except Exception as e:
        logger.error(f"Error analyzing chat {message.chat.id}: {e}", exc_info=True)
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")


@router.message(Command("analyze_all_chats"))
async def handle_analyze_all(message: Message):
    """Analyze messages in all chats (admin only)."""
    logger.info(f"Received analyze_all_chats command from user {message.from_user.id}")
    
    # Check if user is admin
    if not message.from_user or message.from_user.id != int(settings.ADMIN_USER_ID):
        logger.warning(f"User {message.from_user.id} tried to use admin command analyze_all_chats")
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
        
    await message.answer("–ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤...")
    try:
        result = await analyze_chat_messages()
        await message.answer(result)
        logger.info("Completed analysis for all chats")
    except Exception as e:
        logger.error(f"Error analyzing all chats: {e}", exc_info=True)
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")


@router.message(Command("ask_chat_gpt"))
async def handle_ask_chat_gpt(message: Message, state: FSMContext):
    """Start process of asking YandexGPT about chat messages."""
    logger.info(f"Received ask_chat_gpt command in chat {message.chat.id}")
    
    # Extract hours parameter if provided
    command_parts = message.text.split()
    hours = 24  # Default 24 hours
    
    if len(command_parts) > 1:
        try:
            hours = int(command_parts[1])
            if hours < 1:
                hours = 1
            elif hours > 168:  # max 7 days
                hours = 168
        except ValueError:
            pass
    
    await state.update_data(chat_id=message.chat.id, hours=hours)
    await state.set_state(AskGPTForm.waiting_for_question)
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ö–∞–∫–∏–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–∞–ª–∏—Å—å –≤ —á–∞—Ç–µ?', '–ù–∞–π–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–¥–µ–∏' –∏ —Ç.–¥."
    )


@router.message(AskGPTForm.waiting_for_question)
async def process_question(message: Message, state: FSMContext):
    """Process the question and send it with chat messages to YandexGPT."""
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")
        return
    
    data = await state.get_data()
    chat_id = data.get('chat_id')
    hours = data.get('hours', 24)
    question = message.text
    
    logger.info(f"Received question for chat {chat_id}: {question}")
    
    # Clear state
    await state.clear()
    
    await message.answer(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤–º–µ—Å—Ç–µ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏–∑ —á–∞—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤ –≤ –Ø–Ω–¥–µ–∫—Å –ì–ü–¢...")
    
    try:
        result = await ask_chat_messages_gpt(chat_id, question, hours)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        max_message_length = 4000
        if len(result) > max_message_length:
            parts = [result[i:i+max_message_length] for i in range(0, len(result), max_message_length)]
            for i, part in enumerate(parts):
                await message.answer(f"–ß–∞—Å—Ç—å {i+1}/{len(parts)}:\n{part}")
        else:
            await message.answer(result)
            
        logger.info(f"Successfully sent answer for chat {chat_id}")
    except Exception as e:
        logger.error(f"Error sending question to Yandex GPT: {e}", exc_info=True)
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")


@router.message(Command("analyze_result"))
async def handle_analyze_result(
    message: Message,
    session: AsyncSession,
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if message.chat.type != "private":
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await session.get(User, message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user or user.role not in [Role.HR, Role.ADMIN]:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å HR –∏–ª–∏ Admin.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ chat_id –≤ –∫–æ–º–∞–Ω–¥–µ
    if not message.text or len(message.text.split()) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /analyze_result <chat_id>")
        return

    try:
        chat_id = int(message.text.split()[1])
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    conn = await asyncpg.connect(settings.database_url)
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    row = await conn.fetchrow("""
        SELECT analyzed_at, result
        FROM chat_analytics
        WHERE chat_id = $1
        ORDER BY analyzed_at DESC
        LIMIT 1
    """, chat_id)

    if not row:
        await message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    chat_info = f"–ß–∞—Ç ID: {chat_id}"
    response = (
        f"üìä –ê–Ω–∞–ª–∏–∑ —á–∞—Ç–∞: {chat_info}\n"
        f"üïí –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {row['analyzed_at']}\n"
        f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{row['result']}"
    )

    await message.answer(response)


@router.message(Command("get_chat_id"))
async def get_chat_id_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"""
    chat_id = message.chat.id
    chat_type = message.chat.type
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ –¥–ª—è –ø–æ–Ω—è—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    chat_type_name = {
        "private": "–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        "group": "–≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç",
        "supergroup": "—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞",
        "channel": "–∫–∞–Ω–∞–ª"
    }.get(chat_type, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —á–∞—Ç–∞")
    
    response = (
        f"üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ:\n"
        f"üÜî ID —á–∞—Ç–∞: <code>{chat_id}</code>\n"
        f"üìù –¢–∏–ø —á–∞—Ç–∞: {chat_type_name}\n"
        f"üë• –ù–∞–∑–≤–∞–Ω–∏–µ: {message.chat.title or '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è'}"
    )
    
    await message.answer(response, parse_mode="HTML")