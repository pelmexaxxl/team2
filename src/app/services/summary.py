# src/app/services/summary.py
from aiogram import Bot           # ‚Üê –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
from datetime import datetime
from sqlalchemy import select, func

from app.models.user import User, Role, UserAnswer

async def send_daily_summary(bot: Bot, session_maker):
    async with session_maker() as session:
        # –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä ‚Äï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –ø–ª–æ—Ö–∏–º/–Ω–æ—Ä–º/—Ö–æ—Ä–æ—à–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º
        stmt = select(User.username, func.sum(UserAnswer.answer_index).label("score")).join(
            UserAnswer, User.tg_id == UserAnswer.user_id).group_by(User.tg_id)
        res = await session.execute(stmt)
        bad, mid, good = 0, 0, 0
        for _, s in res:
            if s <= 7: bad += 1
            elif s <= 12: mid += 1
            else: good += 1
        text = (f"üìà –°–≤–æ–¥–∫–∞ –∑–∞ {datetime.utcnow():%d.%m.%Y}\n"
                f"üî¥ –ü–ª–æ—Ö–æ–µ: {bad}\nüü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ: {mid}\nüü¢ –•–æ—Ä–æ—à–µ–µ: {good}")
        admins = await session.scalars(select(User).where(User.role == Role.HR))
        for hr in admins:
            await bot.send_message(hr.tg_id, text)
